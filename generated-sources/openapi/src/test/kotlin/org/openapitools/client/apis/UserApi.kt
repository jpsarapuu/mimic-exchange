/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
   "ArrayInDataClass",
   "EnumEntryName",
   "RemoveRedundantQualifierName",
   "UnusedImport"
)

package org.openapitools.client.apis


import org.openapitools.client.infrastructure.*
import org.openapitools.client.models.*
import org.springframework.http.ResponseEntity
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

class UserApi(client: RestClient) : ApiClient(client) {

   constructor(baseUrl: String) : this(RestClient.builder()
      .baseUrl(baseUrl)
      .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
      .build()
   )


   @Throws(RestClientResponseException::class)
   fun createConversionBy(userId: kotlin.Int, conversionForm: ConversionForm): Conversion {
      val result = createConversionByWithHttpInfo(userId = userId, conversionForm = conversionForm)
      return result.body!!
   }

   @Throws(RestClientResponseException::class)
   fun createConversionByWithHttpInfo(
      userId: kotlin.Int,
      conversionForm: ConversionForm,
   ): ResponseEntity<Conversion> {
      val localVariableConfig =
         createConversionByRequestConfig(userId = userId, conversionForm = conversionForm)
      return request<ConversionForm, Conversion>(
         localVariableConfig
      )
   }

   fun createConversionByRequestConfig(
      userId: kotlin.Int,
      conversionForm: ConversionForm,
   ): RequestConfig<ConversionForm> {
      val localVariableBody = conversionForm
      val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
      val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
      localVariableHeaders["Content-Type"] = "application/json"
      localVariableHeaders["Accept"] = "*/*"

      val params = mutableMapOf<String, Any>(
         "userId" to userId,
      )

      return RequestConfig(
         method = RequestMethod.POST,
         path = "/users/{userId}/conversions",
         params = params,
         query = localVariableQuery,
         headers = localVariableHeaders,
         requiresAuthentication = false,
         body = localVariableBody
      )
   }


   @Throws(RestClientResponseException::class)
   fun createExchangeBy(userId: kotlin.Int, exchangeForm: ExchangeForm): Exchange {
      val result = createExchangeByWithHttpInfo(userId = userId, exchangeForm = exchangeForm)
      return result.body!!
   }

   @Throws(RestClientResponseException::class)
   fun createExchangeByWithHttpInfo(
      userId: kotlin.Int,
      exchangeForm: ExchangeForm,
   ): ResponseEntity<Exchange> {
      val localVariableConfig =
         createExchangeByRequestConfig(userId = userId, exchangeForm = exchangeForm)
      return request<ExchangeForm, Exchange>(
         localVariableConfig
      )
   }

   fun createExchangeByRequestConfig(
      userId: kotlin.Int,
      exchangeForm: ExchangeForm,
   ): RequestConfig<ExchangeForm> {
      val localVariableBody = exchangeForm
      val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
      val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
      localVariableHeaders["Content-Type"] = "application/json"
      localVariableHeaders["Accept"] = "*/*"

      val params = mutableMapOf<String, Any>(
         "userId" to userId,
      )

      return RequestConfig(
         method = RequestMethod.POST,
         path = "/users/{userId}/exchanges",
         params = params,
         query = localVariableQuery,
         headers = localVariableHeaders,
         requiresAuthentication = false,
         body = localVariableBody
      )
   }


   @Throws(RestClientResponseException::class)
   fun createTransactionBy(userId: kotlin.Int, transactionForm: TransactionForm): Transaction {
      val result =
         createTransactionByWithHttpInfo(userId = userId, transactionForm = transactionForm)
      return result.body!!
   }

   @Throws(RestClientResponseException::class)
   fun createTransactionByWithHttpInfo(
      userId: kotlin.Int,
      transactionForm: TransactionForm,
   ): ResponseEntity<Transaction> {
      val localVariableConfig =
         createTransactionByRequestConfig(userId = userId, transactionForm = transactionForm)
      return request<TransactionForm, Transaction>(
         localVariableConfig
      )
   }

   fun createTransactionByRequestConfig(
      userId: kotlin.Int,
      transactionForm: TransactionForm,
   ): RequestConfig<TransactionForm> {
      val localVariableBody = transactionForm
      val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
      val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
      localVariableHeaders["Content-Type"] = "application/json"
      localVariableHeaders["Accept"] = "*/*"

      val params = mutableMapOf<String, Any>(
         "userId" to userId,
      )

      return RequestConfig(
         method = RequestMethod.POST,
         path = "/users/{userId}/transactions",
         params = params,
         query = localVariableQuery,
         headers = localVariableHeaders,
         requiresAuthentication = false,
         body = localVariableBody
      )
   }


   @Throws(RestClientResponseException::class)
   fun createUserBy(userForm: UserForm): User {
      val result = createUserByWithHttpInfo(userForm = userForm)
      return result.body!!
   }

   @Throws(RestClientResponseException::class)
   fun createUserByWithHttpInfo(userForm: UserForm): ResponseEntity<User> {
      val localVariableConfig = createUserByRequestConfig(userForm = userForm)
      return request<UserForm, User>(
         localVariableConfig
      )
   }

   fun createUserByRequestConfig(userForm: UserForm): RequestConfig<UserForm> {
      val localVariableBody = userForm
      val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
      val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
      localVariableHeaders["Content-Type"] = "application/json"
      localVariableHeaders["Accept"] = "*/*"

      val params = mutableMapOf<String, Any>(
      )

      return RequestConfig(
         method = RequestMethod.POST,
         path = "/users",
         params = params,
         query = localVariableQuery,
         headers = localVariableHeaders,
         requiresAuthentication = false,
         body = localVariableBody
      )
   }


   @Throws(RestClientResponseException::class)
   fun getUserBy(userId: kotlin.Int): User {
      val result = getUserByWithHttpInfo(userId = userId)
      return result.body!!
   }

   @Throws(RestClientResponseException::class)
   fun getUserByWithHttpInfo(userId: kotlin.Int): ResponseEntity<User> {
      val localVariableConfig = getUserByRequestConfig(userId = userId)
      return request<Unit, User>(
         localVariableConfig
      )
   }

   fun getUserByRequestConfig(userId: kotlin.Int): RequestConfig<Unit> {
      val localVariableBody = null
      val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
      val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
      localVariableHeaders["Accept"] = "*/*"

      val params = mutableMapOf<String, Any>(
         "userId" to userId,
      )

      return RequestConfig(
         method = RequestMethod.GET,
         path = "/users/{userId}",
         params = params,
         query = localVariableQuery,
         headers = localVariableHeaders,
         requiresAuthentication = false,
         body = localVariableBody
      )
   }

}
